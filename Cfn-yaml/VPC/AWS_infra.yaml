AWSTemplateFormatVersion: 2010-09-09
Description: Creates two-subnets in VPC (Public w/ NAT gateway and Private )
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Configuration Parameters
        Parameters:
          - VPCNAME
          - VPCCIDR
          - PublicSubnetCIDR
          - SSHLocation
    ParameterLabels:
      VPCNAME:
        default: Enter New VPC Name
      VPCCIDR:
        default: Enter CIDR of New VPC
      PublicSubnetCIDR:
        default: Enter CIDR of the Public Subnet
      SSHLocation:
        default: Subnet Allowed to SSH on TCP to Public Subnet
Parameters:
  VPCNAME:
    Default: Test-VPC
    Description: Name of the entire VPC
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for entire VPC
    Type: String
    Default: 10.50.0.0/16
  PublicSubnetCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for the Public Subnet
    Type: String
    Default: 10.50.10.0/24
  SSHLocation:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28
    Default: 0.0.0.0/0
    Description: Network Allowed to SSH to instances in public subnet
    Type: String
Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-09d56f8956ab235b3
    # us-east-2:
    #   HVM64: ami-0aeb7c931a5a61206
  AZRegions:
      us-east-1:
        AZs: ["a"]
      # us-east-2:
      #   AZs: ["a", "b"]
      # us-west-1:
      #   AZs: ["a", "b"]
      # us-west-2:
      #   AZs: ["a", "b"]
Conditions: {}
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Ref: VPCCIDR
      Tags:
        - Key: Name
          Value: TestingVPC
        - Key: CloudFormationStack
          Value:
            Ref: AWS::StackId
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW
        - Key: CloudFormationStack
          Value:
            Ref: AWS::StackId
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnetCIDR
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !Ref VPCNAME
                - PublicSubnet-1
        - Key: CloudFormationStack
          Value:
            Ref: AWS::StackId
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !Ref VPCNAME
                - PublicRoutingTable
        - Key: CloudFormationStack
          Value:
            Ref: AWS::StackId
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssosiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicSubnetRouteTable
  PublicInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Via Port 22 and HTTP via port 80
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Allow SSH traffic from SSHLocation CIDR
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SSHLocation
        - IpProtocol: tcp
          Description: Allow HTTP traffic from Anywhere
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          Description: Allow HTTPS traffic from Anywhere
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !Ref VPCNAME
                - PublicSG
        - Key: CloudFormationStack
          Value:
            Ref: AWS::StackId
  WebServer1:
# checkov:skip=CKV_AWS_88: ADD REASON
    Type: AWS::EC2::Instance
    Properties:
      KeyName: key-1
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - HVM64
      InstanceType: t2.micro
      Monitoring: true
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref PublicInstanceSG
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !Ref VPCNAME
                - WebSever-1
      UserData: !Base64 |
        #!/bin/bash -ex
        sudo apt update
        sudo apt-get install nginx -y
        sudo systemctl start nginx
        sudo systemctl enable nginx
        echo '<h1> NGINX --- WEBSERVER-1 </h1>' >> /usr/share/nginx/html/index.html
        echo '<img src="https://res.cloudinary.com/techvblogs/image/upload/v1611308422/banner/nxxdbogkskqx6aecbjxi.png" alt="Nginx!" width="500" height="400"/>' >> /usr/share/nginx/html/index.html
        sudo systemctl start nginx
Outputs:
  VPCId:
    Description: VPCId of the Newly Created VPC
    Value:
      Ref: VPC
  PublicSubnetId:
    Description: "SubnetId of PublicSubnet "
    Value:
      Ref: PublicSubnet
  PublicSubnetRouteTable:
    Description: Public Route Table
    Value:
      Ref: PublicSubnetRouteTable
  PublicInstanceSG:
    Description: SG for instances in Public Subnet
    Value:
      Ref: PublicInstanceSG
  PublicIP:
    Description: EC2 public IP
    Value: !GetAtt WebServer1.PublicIp
  WebsiteURL:
    Description: Nginx Website URL
    Value: !Sub "http://${WebServer1.PublicDnsName}:80"
